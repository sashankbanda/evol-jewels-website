// server.js - THE ACTUAL SECURE NODE/EXPRESS BACKEND (Converted to ES Modules)

import express from 'express';
import cors from 'cors';
import bodyParser from 'body-parser';
import dotenv from 'dotenv';
import { GoogleGenAI } from '@google/genai'; // Gemini SDK
import { google } from 'googleapis'; // Google APIs client for Custom Search

// Load environment variables from .env file
dotenv.config({ path: 'server/.env' });

const app = express();
const PORT = 3001; // Use port 3001 for the backend

// --- 1. MIDDLEWARE & SETUP ---
app.use(cors()); 
app.use(bodyParser.json());

// Initialize Gemini AI (Key is loaded from process.env)
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GOOGLE_SEARCH_API_KEY = process.env.GOOGLE_SEARCH_API_KEY;
const CUSTOM_SEARCH_ENGINE_ID = process.env.CUSTOM_SEARCH_ENGINE_ID;

// Safety check for keys
if (!GEMINI_API_KEY || !GOOGLE_SEARCH_API_KEY || !CUSTOM_SEARCH_ENGINE_ID) { 
    console.error("FATAL: One or more API keys are missing or invalid. Check your server/.env file.");
}

const ai = new GoogleGenAI({ apiKey: GEMINI_API_KEY });
const customsearch = google.customsearch('v1');


// --- 2. API ENDPOINT LOGIC ---
// Your React frontend will call this endpoint: http://localhost:3001/api/analyze-outfit
app.post('/api/analyze-outfit', async (req, res) => {
    const { outfitText } = req.body;
    
    if (!outfitText) {
        return res.status(400).json({ error: "Missing outfitText in request body." });
    }

    const prompt = `
        You are a highly skilled jewelry stylist.
        Analyze the user's outfit description and suggest the BEST jewelry metal (Polished Gold, Matte Silver, or Mixed Metals) based on the tones, colors, and occasion described. 

        Return only a single JSON object. Do not include any explanation or markdown tags.
        
        User Text: "${outfitText}"

        JSON Schema to follow strictly:
        {
          "metal_match": "Polished Gold" | "Matte Silver" | "Mixed Metals",
          "description": "A single sentence explaining the style and metal choice.",
          "search_query": "A precise phrase to search for a visual reference image (e.g., 'Yellow mehendi gold jewelry aesthetic')."
        }
    `;

    let aiData;
    let refImageUrl = '';
    
    try {
        // 1. CALL GEMINI (Text Analysis)
        const geminiResponse = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: prompt,
            config: {
                responseMimeType: "application/json", 
            }
        });
        
        // Parse the JSON data returned from the AI
        aiData = JSON.parse(geminiResponse.text.trim());

        // 2. CALL GOOGLE CUSTOM SEARCH API (Image Retrieval)
        const searchResult = await customsearch.cse.list({
            auth: GOOGLE_SEARCH_API_KEY,
            cx: CUSTOM_SEARCH_ENGINE_ID,
            q: aiData.search_query, // Use the query generated by Gemini
            searchType: 'image',    // Crucial for fetching images
            num: 1,                 // We only need the best result
        });

        // 3. Extract the image link
        if (searchResult.data.items && searchResult.data.items.length > 0) {
            refImageUrl = searchResult.data.items[0].link;
        }

        // 4. Send final structured response back to the React frontend
        res.json({
            keywords: {
                metal_match: aiData.metal_match,
                description: aiData.description
            },
            imageUrl: refImageUrl
        });

    } catch (error) {
        console.error("Full Pipeline Error:", error.message);
        
        // 5. Secure Fallback for API Failures
        // Send the AI's analysis (if it succeeded) but use a placeholder image if search failed.
        // If the whole try block failed, use default values.
        const fallbackKeywords = aiData ? aiData : {
            metal_match: 'Polished Gold',
            description: 'Could not connect to the styling service. Showing default match.',
        };

        res.status(500).json({ 
            error: "Failed to connect to image service.",
            keywords: {
                metal_match: fallbackKeywords.metal_match,
                description: fallbackKeywords.description
            },
            imageUrl: 'https://placehold.co/400x200/B1B1B1/111111?text=Service+Error+-+No+Image' 
        });
    }
});

// --- 3. START SERVER ---
app.listen(PORT, () => {
    console.log(`Backend Server running on http://localhost:${PORT}`);
    console.log(`Don't forget to run 'npm run dev' in another terminal for the frontend!`);
});